[gd_scene load_steps=6 format=2]

[ext_resource path="res://SldLb.tscn" type="PackedScene" id=2]
[ext_resource path="res://VPD_Gen.gd" type="Script" id=3]

[sub_resource type="AudioStreamGenerator" id=1]
buffer_length = 0.2

[sub_resource type="StyleBoxFlat" id=6]
bg_color = Color( 0.00392157, 0, 0.0862745, 0.227451 )
border_width_left = 1
border_width_top = 1
border_width_right = 1
border_width_bottom = 1
border_color = Color( 0.290196, 0.290196, 0.290196, 1 )

[sub_resource type="GDScript" id=5]
script/source = "extends Panel
var font = get_font(\"\")

enum {SAW, SINE, TRI, PULSE}


func _ready():
	for o in $V.get_children():
		o.connect(\"value_changed\", self, \"redraw\")
	redraw()

func _physics_process(delta):
	update()

func _draw():
	#Draw XY Plot of lines for PD modulation span
	var x = $V/Skew.value
	var y = $V/Formant.value
	var y_span = $V/YSpan.value

	var ratio = 1.0 / y_span

	var origin = Vector2(0, 1.0 - (1.0-ratio)/2.0)
	var dest = Vector2(1, (1.0-ratio)/2.0)

	var bounds = Rect2(0, 0, 1, ratio)
	bounds.position.y = (1.0 - ratio) * rect_size.y / 2.0
	bounds.size *= rect_size

	draw_rect(bounds, ColorN(\"green\", 0.2), false)

	#Cross
	draw_line(Vector2(rect_size.x/2.0, 0), Vector2(rect_size.x/2.0, rect_size.y), ColorN(\"white\", 0.2))
	draw_line(Vector2(0, rect_size.y/2.0), Vector2(rect_size.x, rect_size.x/2.0), ColorN(\"white\", 0.2))
	
	#PD Points
	var centerpoint = Vector2(x*rect_size.x, y*rect_size.y)
	draw_line(origin*rect_size, centerpoint, ColorN(\"white\"))
	draw_line(centerpoint, dest*rect_size, ColorN(\"white\"))
	
#	draw_string(font, Vector2.ZERO, str(owner.get_node(\"AudioStreamPlayer\").osc))
#	var x2 = owner.get_node(\"AudioStreamPlayer\").distort(fmod( owner.get_node(\"AudioStreamPlayer\").phase , 1.0))
	var x2 = fmod( owner.get_node(\"AudioStreamPlayer\").phase , 1.0)
	var y2 = owner.get_node(\"AudioStreamPlayer\").osc
	var circ = Vector2(x2, -y2 / 2.0 + 0.5) * rect_size
	draw_circle(circ, 3, ColorN(\"cyan\", 0.5))

func redraw(val=null):
	update()
	
	var pts = []
	if owner.get_node(\"chkFilter\").pressed == true:
		for i in rect_size.x:
			var osc = osc_at( fmod(owner.get_node(\"AudioStreamPlayer\").distort(i / rect_size.x), 1.0) )
			var osc2= osc_at(i/rect_size.x + 0.25 )
			osc *= osc2
			pts.append(Vector2(i, (-osc/2.0 + 0.5) * rect_size.y))
	else:
		for i in rect_size.x:
			var osc = osc_at( fposmod(owner.get_node(\"AudioStreamPlayer\").distort(i / rect_size.x), 1.0) )
			pts.append(Vector2(i, (-osc/2.0 + 0.5) * rect_size.y))
		
	$Poly.points = pts

func osc_at(phase):
	var osc = phase
	match(owner.get_node(\"OptionButton\").selected):
		SAW:
			osc = fmod(phase, 1.0)*2.0-1.0
		SINE:
			osc = sin(phase * TAU)
		TRI:
			osc = fmod(phase, 1.0)
			if osc > 0.5:  osc = 1.0 - osc
			osc = osc*4 - 1.0
			osc = stepify(osc, 1.0/float( 1 << int(owner.get_node(\"Duty\").value) ))  #Crush to n-bits
		PULSE: 
			osc = fmod(phase, 1.0)
			if osc > owner.get_node(\"Duty\").value/16.0:  osc = 0.9 
			else: osc = -0.9
	return osc


var pressed = false
func _on_CenterContainer_gui_input(event):
	var v
	if event is InputEventMouseButton and event.button_index == BUTTON_LEFT:
		pressed = event.pressed
		if pressed: v = get_local_mouse_position() / rect_size
	elif event is InputEventMouseMotion and pressed:
		v = get_local_mouse_position() / rect_size
	
	if v: 
		$V/Skew.value = v.x
		$V/Formant.value = v.y
"

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_lock_": true
}

[node name="AudioStreamPlayer" type="AudioStreamPlayer" parent="."]
stream = SubResource( 1 )
volume_db = -32.0
script = ExtResource( 3 )

[node name="OptionButton" type="OptionButton" parent="."]
margin_left = 64.0
margin_top = 96.0
margin_right = 224.0
margin_bottom = 126.0
text = "Sine"
items = [ "Saw", null, false, 0, null, "Sine", null, false, 1, null, "Tri", null, false, 2, null, "Pulse", null, false, 3, null ]
selected = 1

[node name="Label" type="Label" parent="OptionButton"]
margin_top = -22.0
margin_right = 40.0
margin_bottom = -8.0
text = "Input Oscillator:"

[node name="CenterContainer" type="Panel" parent="."]
margin_left = 680.0
margin_top = 80.0
margin_right = 936.0
margin_bottom = 336.0
rect_min_size = Vector2( 256, 256 )
custom_styles/panel = SubResource( 6 )
script = SubResource( 5 )
__meta__ = {
"_edit_group_": true
}

[node name="Poly" type="Line2D" parent="CenterContainer"]
points = PoolVector2Array( 0, 0, 96, 24, 168, 216, 256, 256 )
width = 1.0
default_color = Color( 0, 0.360784, 0.592157, 0.0862745 )
antialiased = true

[node name="V" type="VBoxContainer" parent="CenterContainer"]
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Skew" parent="CenterContainer/V" instance=ExtResource( 2 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_right = 256.0
margin_bottom = 16.0
max_value = 1.0
step = 0.001
value = 0.5
text = "Skew"

[node name="Formant" parent="CenterContainer/V" instance=ExtResource( 2 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 20.0
margin_right = 256.0
margin_bottom = 36.0
max_value = 1.0
step = 0.001
value = 0.5
text = "Formant"

[node name="YSpan" parent="CenterContainer/V" instance=ExtResource( 2 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_top = 40.0
margin_right = 256.0
margin_bottom = 56.0
min_value = 1.0
max_value = 12.0
step = 0.1
value = 1.0
text = "Y Span"

[node name="Freq" parent="." instance=ExtResource( 2 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 208.0
margin_top = 408.0
margin_right = 624.0
margin_bottom = 424.0
min_value = 1.0
max_value = 11025.0
value = 220.0
exp_edit = true
text = "Frequency"

[node name="Duty" parent="." instance=ExtResource( 2 )]
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 208.0
margin_top = 448.0
margin_right = 624.0
margin_bottom = 464.0
min_value = 1.0
max_value = 15.0
value = 5.0
text = "Duty/Crush"

[node name="chkFilter" type="CheckButton" parent="."]
margin_left = 64.0
margin_top = 128.0
margin_right = 224.0
margin_bottom = 168.0
hint_tooltip = "Applies a bit of ring modulation with the unmodified carrier to the phase-distorted output to change the timbre of the sound."
text = "Filter"

[connection signal="item_selected" from="OptionButton" to="CenterContainer" method="redraw"]
[connection signal="gui_input" from="CenterContainer" to="CenterContainer" method="_on_CenterContainer_gui_input"]
[connection signal="value_changed" from="CenterContainer/V/Skew" to="AudioStreamPlayer" method="_on_Skew_value_changed"]
[connection signal="value_changed" from="CenterContainer/V/Formant" to="AudioStreamPlayer" method="_on_Formant_value_changed"]
[connection signal="value_changed" from="CenterContainer/V/YSpan" to="AudioStreamPlayer" method="_on_YSpan_value_changed"]
[connection signal="value_changed" from="Freq" to="AudioStreamPlayer" method="_on_Freq_value_changed"]
[connection signal="value_changed" from="Duty" to="AudioStreamPlayer" method="_on_Duty_value_changed"]
[connection signal="toggled" from="chkFilter" to="AudioStreamPlayer" method="_on_chkFilter_toggled"]
